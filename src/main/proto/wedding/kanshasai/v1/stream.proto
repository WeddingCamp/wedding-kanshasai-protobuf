syntax = "proto3";

package wedding.kanshasai.v1;

import "wedding/kanshasai/v1/common.proto";
import "wedding/kanshasai/v1/quiz.proto";

option csharp_namespace = "WeddingCamp.ProtoBuf";
option java_multiple_files = true;
option java_outer_classname = "StreamProto";
option java_package = "wedding.kanshasai.v1";

// 包括的なストリーム機能を提供するサービス
service StreamService {
  // スクリーン向けイベントストリーム
  rpc StreamEvent(StreamEventRequest) returns (stream StreamEventResponse);
}

// イベントストリームリクエスト
message StreamEventRequest {
  // セッションID
  string session_id = 1;
  // ストリーム種別
  StreamType type = 2;
}

// イベントストリームレスポンス
message StreamScreenEventRequest {
  // セッションID
  string session_id = 1;
}

// イベントストリームレスポンス
message StreamEventResponse {
  // クイズ情報
  message Quiz {
    // クイズ選択肢オブジェクト
    message Choice {
      // 選択肢ID
      string choice_id = 1;
      // 選択肢Body
      string body = 2;
      // 件数（QUIZ_ANSWER_LIST / QUIZ_RESULTのみ）
      optional int32 count = 3;
      // 正解フラグ（QUIZ_RESULTのみ）
      optional bool is_correct_choice = 4;
      // 選択フラグ（QUIZ_RESULTかつSTREAM_TYPE_PARTICIPANTのみ）
      optional bool is_selected_choice = 5;
    }

    // クイズID
    string quiz_id = 1;
    // クイズ問題文
    string body = 2;
    // クイズ種別
    QuizType quiz_type = 3;

    // クイズ選択肢の配列
    repeated Choice choices = 4;
  }

  // 早押しランキングイベントBody
  message SpeedRanking {
    // 参加者のスコア
    message ParticipantQuizTime {
      // 参加者名
      string participant_name = 1;
      // 参加者画像URL
      optional string participant_image_url = 2;
      // タイム
      float time = 3;
    }

    // 参加者の回答時間の配列
    repeated ParticipantQuizTime participant_quiz_times = 1;
  }

  // 中間/最終結果発表イベントBody
  message SessionResult {
    // 参加者のスコア
    message ParticipantSessionScore {
      // 参加者名
      string participant_name = 1;
      // 参加者画像URL
      optional string participant_image_url = 2;
      // スコア
      string score = 3;
    }

    // 参加者のスコアの配列
    repeated ParticipantSessionScore participant_session_scores = 1;
  }

  // メッセージ
  message Message {
    // メッセージ本文
    string body = 1;
    // メッセージレベル
    MessageLevel level = 2;
  }

  // カバー
  message Cover {
    // カバーを表示するか
    bool is_visible = 1;
  }

  // イントロダクション
  message IntroductionEvent {
    // イントロダクション種別
    IntroductionType introduction_type = 1;
  }

  // 現在状態
  message SessionState {
    // ゲームの進行状態
    SimpleSessionState simple_session_state = 1;
    // ゲームの進行状態（バックエンドで定義しているより詳細なステート）
    string session_state = 2;
  }

  // イベント種別
  EventType event_type = 1;
  // 正答数（STREAM_TYPE_PARTICIPANTのみ）
  int32 correct_answer_count = 2;

  // イベントBody
  oneof event_body {
    // イントロダクション表示イベントBody
    IntroductionEvent introduction_event = 10;

    // クイズ（PRE_QUIZ / SHOW_QUIZ / START_QUIZ / QUIZ_TIME_UP / QUIZ_ANSWER_LIST / QUIZ_RESULT）
    Quiz quiz = 11;
    // 早押しランキング（QUIZ_SPEED_RANKING）
    SpeedRanking speed_ranking = 12;
    // 結果発表（SESSION_INTERIM_RESULT / SESSION_FINAL_RESULT）
    SessionResult session_result = 13;

    // メッセージ（MESSAGE）
    Message message = 14;
    // カバー（COVER）
    Cover cover = 15;
    // 現在状態（CURRENT_STATE）
    SessionState session_state = 16;
  }
}

// ストリーム種別
enum StreamType {
  // 未定義
  STREAM_TYPE_UNSPECIFIED = 0;
  // スクリーン
  STREAM_TYPE_SCREEN = 1;
  // 参加者
  STREAM_TYPE_PARTICIPANT = 2;
  // 司会者
  STREAM_TYPE_MANAGER = 3;
  // デバッグ
  STREAM_TYPE_DEBUG = 4;
}

// イベント種別
enum EventType {
  // 未定義
  EVENT_TYPE_UNSPECIFIED = 0;

  // イントロダクション表示イベント
  EVENT_TYPE_INTRODUCTION = 10;

  // クイズ情報イベント（クイズや選択肢画像などをプリロードするためのイベント）
  EVENT_TYPE_PRE_QUIZ = 20;
  // クイズ表示イベント（PreQuizで取得できていなくても動かせるよう全データを載せる）
  EVENT_TYPE_SHOW_QUIZ = 21;
  // クイズ回答開始イベント
  EVENT_TYPE_START_QUIZ = 22;
  // 締め切りイベント
  EVENT_TYPE_QUIZ_TIME_UP = 23;
  // クイズ回答数イベント
  EVENT_TYPE_QUIZ_ANSWER_LIST = 24;
  // クイズ結果イベント
  EVENT_TYPE_QUIZ_RESULT = 25;
  // 早押しランキングイベント
  EVENT_TYPE_QUIZ_SPEED_RANKING = 26;

  // クイズキャンセルイベント
  EVENT_TYPE_CANCEL_QUIZ = 29;

  // 中間結果表示イベント
  EVENT_TYPE_SESSION_INTERIM_RESULT = 30;
  // 最終結果表示イベント
  EVENT_TYPE_SESSION_FINAL_RESULT = 31;
  // 勝者イベント（参加者用）
  EVENT_TYPE_WINNER = 32;

  // 終了イベント
  EVENT_TYPE_FINISH = 40;

  // メッセージイベント
  EVENT_TYPE_MESSAGE = 50;
  // カバーイベント
  EVENT_TYPE_COVER = 98;
  // 現在状態イベント
  EVENT_TYPE_CURRENT_STATE = 99;
}

// ゲームの状態を表すステート
enum SimpleSessionState {
  // 未定義
  SIMPLE_SESSION_STATE_UNSPECIFIED = 0;
  // 開始前状態
  SIMPLE_SESSION_STATE_BEFORE_START = 1;
  // ゲーム中状態
  SIMPLE_SESSION_STATE_DURING_THE_GAME = 2;
  // 終了済状態
  SIMPLE_SESSION_STATE_FINISHED = 3;
}
