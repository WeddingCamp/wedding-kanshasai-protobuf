name: Publish
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  publish-maven-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Publish to maven
        uses: gradle/gradle-build-action@v2
        env:
          ORG_GRADLE_PROJECT_mizucoffeeRepositoryUsername: ${{ secrets.MAVEN_USERNAME }}
          ORG_GRADLE_PROJECT_mizucoffeeRepositoryPassword: ${{ secrets.MAVEN_PASSWORD }}
        with:
          arguments: publish

  publish-upm-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Protoc
        uses: arduino/setup-protoc@v2

      - name: Install protoc-gen-grpc
        shell: bash
        run: |
          curl -Lo grpc-tools.zip https://packages.grpc.io/archive/2022/04/67538122780f8a081c774b66884289335c290cbe-f15a2c1c-582b-4c51-acf2-ab6d711d2c59/csharp/Grpc.Tools.2.47.0-dev202204190851.nupkg
          sudo unzip -j grpc-tools.zip tools/linux_x64/grpc_csharp_plugin -d /usr/local/bin
          rm grpc-tools.zip
          sudo mv /usr/local/bin/grpc_csharp_plugin /usr/local/bin/protoc-gen-grpc
          sudo chmod +x /usr/local/bin/protoc-gen-grpc

      - name: Generate package.json
        shell: bash
        run: |
          QUERY="del(.devDependencies)|.dependencies={\"wedding.kanshasai.grpc.core\": \"2.47.0\"}|.name=\"wedding.kanshasai.protobuf\"|.displayName=\"Wedding Kanshasai ProtoBuf\"|.version=\"$(./gradlew -q printVersion)\""
          cat package.template.json | jq "$QUERY" > package.json

      - name: Build stub codes
        shell: bash
        run: |
          mkdir Runtime
          protoc -Isrc/main/proto/ --csharp_out=./Runtime --csharp_opt=base_namespace=WeddingCamp.ProtoBuf --grpc_out=./Runtime $(find src/main/proto -iname "*.proto")

      - name: Create asmdef file
        shell: bash
        run: |
          cat << EOF > Runtime/Wedding.Kanshasai.ProtoBuf.asmdef
          {
            "name": "WeddingKanshasaiProtoBuf",
            "rootNamespace": "",
            "references": [],
            "includePlatforms": [],
            "excludePlatforms": [],
            "allowUnsafeCode": true,
            "overrideReferences": false,
            "precompiledReferences": [],
            "autoReferenced": true,
            "defineConstraints": [],
            "versionDefines": [],
            "noEngineReferences": false
          }
          EOF

      - name: Create meta files
        shell: bash
        run: |
          for FILE in Runtime/*; do
            cat << EOF > $FILE.meta
          fileFormatVersion: 2
          guid: $(echo $FILE | md5sum | cut -d' ' -f1)
          folderAsset: yes
          DefaultImporter:
            externalObjects: {}
            userData:
            assetBundleName:
            assetBundleVariant:
          EOF
          done

      - name: Publish to UPM Repository
        env:
          UPM_REGISTRY: ${{ secrets.UPM_REGISTRY }}
          UPM_SECRET: ${{ secrets.UPM_SECRET }}
        shell: bash
        run: |
          echo //$UPM_REGISTRY/:_auth=$UPM_SECRET >> .npmrc
          echo registry=https://$UPM_REGISTRY/ >> .npmrc
          echo always-auth=true >> .npmrc
          npm publish

  publish-npm-package::
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Protoc
        uses: arduino/setup-protoc@v2

      - name: Install protoc-gen-js
        shell: bash
        run: |
          curl -Lo protobuf-javascript.zip https://github.com/protocolbuffers/protobuf-javascript/releases/download/v3.21.2/protobuf-javascript-3.21.2-linux-x86_64.zip
          sudo unzip -j protobuf-javascript.zip bin/protoc-gen-js -d /usr/local/bin
          rm protobuf-javascript.zip
          sudo chmod +x /usr/local/bin/protoc-gen-js

      - name: Install protoc-gen-grpc-web
        shell: bash
        run: |
          curl -Lo protoc-gen-grpc-web https://github.com/grpc/grpc-web/releases/download/1.4.2/protoc-gen-grpc-web-1.4.2-linux-x86_64
          sudo mv protoc-gen-grpc-web /usr/local/bin/protoc-gen-grpc-web
          sudo chmod +x /usr/local/bin/protoc-gen-grpc-web

      - name: Setup node 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Generate package.json
        shell: bash
        run: |
          QUERY=".version=\"$(./gradlew -q printVersion)\""
          cat package.template.json | jq "$QUERY" > package.json

      - name: Install dependencies
        shell: bash
        run: npm install

      - name: Build stub codes
        shell: bash
        run: |
          protoc -Isrc/main/proto/ --js_out=import_style=commonjs,binary:. --grpc-web_out=import_style=commonjs+dts,mode=grpcwebtext:. $(find src/main/proto -iname "*.proto")

      - name: Publish to NPM Repository
        env:
          NPM_REGISTRY: ${{ secrets.NPM_REGISTRY }}
          NPM_SECRET: ${{ secrets.NPM_SECRET }}
        shell: bash
        run: |
          echo //$NPM_REGISTRY/:_auth=$NPM_SECRET >> .npmrc
          echo registry=https://$NPM_REGISTRY/ >> .npmrc
          echo always-auth=true >> .npmrc
          npm publish

  deploy-document:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'

      - name: Install Protoc
        uses: arduino/setup-protoc@v2

      - name: Prepare Protoc gen doc
        shell: bash
        run: go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc@latest

      - name: Generate documents
        shell: bash
        run: |
          protoc --doc_out=./doc --doc_opt=html,index.html --proto_path=src/main/proto/ $(find src/main/proto -iname "*.proto")

      - name: Setup Pages
        uses: actions/configure-pages@v1

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './doc'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
